// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Table extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Table entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Table must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Table", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Table | null {
    return changetype<Table | null>(store.get("Table", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get fullTableName(): string {
    let value = this.get("fullTableName");
    return value!.toString();
  }

  set fullTableName(value: string) {
    this.set("fullTableName", Value.fromString(value));
  }

  get likes(): Array<Bytes> | null {
    let value = this.get("likes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set likes(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("likes");
    } else {
      this.set("likes", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class Like extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Like entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Like must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Like", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Like | null {
    return changetype<Like | null>(store.get("Like", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get tableName(): Bytes {
    let value = this.get("tableName");
    return value!.toBytes();
  }

  set tableName(value: Bytes) {
    this.set("tableName", Value.fromBytes(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
